{"version":3,"sources":["App.js","useOutsideClickHandler.js","index.js"],"names":["poke","a","fetch","mode","cache","opened","Cell","handler","ref","columnIndex","rowIndex","style","useState","getOpened","open","setOpen","modalRef","useRef","current","display","useEffect","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","fontWeight","opacity","undefined","padding","borderRadius","border","color","cursor","onClick","key","outer","createElement","container","position","width","height","top","left","zIndex","flexDirection","append","innerHTML","body","getImageDiv","setOpened","colCount","rowCount","App","init","setInit","gridRef","setTimeout","scrollToItem","className","columnCount","columnWidth","direction","rowHeight","rootElement","getElementById","ReactDOM","render"],"mappings":"kOAQMA,EAAI,uCAAG,sBAAAC,EAAA,+EACJC,MAAM,kDAAmD,CAC9DC,KAAM,aAFG,2CAAH,qDAMJC,EAAQ,GACRC,EAAS,GAuDTC,EAAO,SAAC,GAAsC,ICpELC,EAASC,EDoExCC,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MACrC,EAAwBC,mBAlDR,SAACH,EAAaC,GAE9B,OAAOL,EADKI,EAAc,IAAMC,KACV,EAgDWG,CAAUJ,EAAaC,IAAxD,mBAAOI,EAAP,KAAaC,EAAb,KACMC,EAAWC,mBAqBjB,OC3F6CV,EDyFtB,WAhBjBS,EAASE,UACXF,EAASE,QAAQP,MAAMQ,QAAU,SC1EiBX,EDyFVQ,ECxF5CI,qBAAU,WACR,SAASC,EAAmBC,GACtBd,EAAIU,UAAYV,EAAIU,QAAQK,SAASD,EAAME,SAC7CjB,IAOJ,OAFAkB,SAASC,iBAAiB,YAAaL,GACvCI,SAASC,iBAAiB,YAAaL,GAChC,WAELI,SAASE,oBAAoB,YAAaN,GAC1CI,SAASE,oBAAoB,YAAaN,MAE3C,CAACb,EAAKD,ID4EP,qBAAKI,MAAOA,EAAZ,SACE,wBACEA,MAAO,CACLiB,WAAY,OACZC,QAASf,EAAO,WAAQgB,EACxBC,QAAS,gBACTC,aAAc,SACdC,OAAQ,sBACRC,MAAO,QACPC,OAAQ,WAEVC,QAzBa,WACZpB,EAASE,UACZF,EAASE,QAxDK,SAACT,EAAaC,GAChC,IAAM2B,EAAM5B,EAAc,IAAMC,EAEhC,GAAIN,EAAMiC,GACR,OAAOjC,EAAMiC,GAGf,IAAMC,EAAQb,SAASc,cAAc,OAE/BC,EAAYf,SAASc,cAAc,OAgCzC,OA/BAC,EAAUd,iBAAiB,SAAS,WAClCY,EAAM3B,MAAMQ,QAAU,UAGxBqB,EAAU7B,MAAM8B,SAAW,QAC3BD,EAAU7B,MAAM+B,MAAQ,OACxBF,EAAU7B,MAAMgC,OAAS,OACzBH,EAAU7B,MAAMiC,IAAM,EACtBJ,EAAU7B,MAAMkC,KAAO,EACvBL,EAAU7B,MAAMmC,OAAS,IACzBN,EAAU7B,MAAMQ,QAAU,OAC1BqB,EAAU7B,MAAMoC,cAAgB,SAChCT,EAAMU,OAAOR,GAEbA,EAAUS,UAAV,2RA5Ca,kDA4Cb,yKAcAxB,SAASyB,KAAKF,OAAOV,GAErBlC,EAAMiC,GAAOC,EACNlC,EAAMiC,GAeUc,CAAY1C,EAAaC,GAC5CV,KAGFgB,EAASE,QAAQP,MAAMQ,QAAU,QACjCJ,GAAQ,GAtEM,SAACN,EAAaC,GAE9BL,EADYI,EAAc,IAAMC,IAClB,EAqEZ0C,CAAU3C,EAAaC,IAOrB,+BAkBA2C,EAAW,IACXC,EAAW,IAEF,SAASC,IACtB,MAAwB3C,oBAAS,GAAjC,mBAAO4C,EAAP,KAAaC,EAAb,KACMC,EAAUzC,mBAahB,OAXAG,qBAAU,WACHoC,GACLG,YAAW,WACTF,GAAQ,GACRC,EAAQxC,QAAQ0C,aAAa,CAC3BnD,YAAa4C,IACb3C,SAAU4C,YAMd,qBACEO,UAAU,MACVlD,MAAO,CACL+B,MAAO,OACPC,OAAQ,QAJZ,SAOE,cAAC,IAAD,CACEhC,MAAO,CACL+B,MAAO,OACPC,OAAQ,QAEVnC,IAAKkD,EACLI,YAAaT,EACbU,YAAa,IACbC,UAAU,MACVrB,OAAQ,IACRW,SAAUA,EACVW,UAAW,GACXvB,MAAO,IAZT,SAcGpC,MEpJT,IAAM4D,EAAczC,SAAS0C,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACd,EAAD,MAEFW,K","file":"static/js/main.53629ccd.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport { FixedSizeGrid as Grid } from \"react-window\";\nimport useOutsideClickHandler from \"./useOutsideClickHandler\";\n\nimport \"./styles.css\";\n\nconst catUrl = \"https://thecatapi.com/api/images/get?format=src\";\n\nconst poke = async () => {\n  return fetch(\"https://thecatapi.com/api/images/get?format=src\", {\n    mode: \"no-cors\"\n  });\n};\n\nconst cache = {};\nconst opened = {};\n\nconst setOpened = (columnIndex, rowIndex) => {\n  const key = columnIndex + \"-\" + rowIndex;\n  opened[key] = true;\n};\nconst getOpened = (columnIndex, rowIndex) => {\n  const key = columnIndex + \"-\" + rowIndex;\n  return opened[key] || false;\n};\n\nconst getImageDiv = (columnIndex, rowIndex) => {\n  const key = columnIndex + \"-\" + rowIndex;\n\n  if (cache[key]) {\n    return cache[key];\n  }\n\n  const outer = document.createElement(\"div\");\n\n  const container = document.createElement(\"div\");\n  container.addEventListener(\"click\", () => {\n    outer.style.display = \"none\";\n  });\n\n  container.style.position = \"fixed\";\n  container.style.width = \"100%\";\n  container.style.height = \"100%\";\n  container.style.top = 0;\n  container.style.left = 0;\n  container.style.zIndex = 100;\n  container.style.display = \"flex\";\n  container.style.flexDirection = \"column\";\n  outer.append(container);\n\n  container.innerHTML = `<div style=\"flex-grow: 1\"></div>\n    <div style=\"display: flex; flex-grow: 0; flex-direction: row\">\n\n      <div style=\"flex-grow: 1\"></div>\n      <div style=\"flex-grow: 0; overflow-y: scroll; max-height: 100vh;\">\n        <div style=\"margin: 1em; \">\n        <img src=\"${catUrl}\" style=\"max-width: 100%; max-height: 100%;\">\n        </div>\n      </div>\n      <div style=\"flex-grow: 1\"></div>\n\n    </div>\n  <div style=\"flex-grow: 1\"></div>`;\n\n  document.body.append(outer);\n\n  cache[key] = outer;\n  return cache[key];\n};\n\nconst Cell = ({ columnIndex, rowIndex, style }) => {\n  const [open, setOpen] = useState(getOpened(columnIndex, rowIndex));\n  const modalRef = useRef();\n\n  const handleClose = () => {\n    if (modalRef.current) {\n      modalRef.current.style.display = \"none\";\n    }\n  };\n\n  const handleOpen = () => {\n    if (!modalRef.current) {\n      modalRef.current = getImageDiv(columnIndex, rowIndex);\n      poke();\n    }\n\n    modalRef.current.style.display = \"block\";\n    setOpen(true);\n    setOpened(columnIndex, rowIndex);\n  };\n\n  useOutsideClickHandler(() => handleClose(), modalRef);\n\n  return (\n    <div style={style}>\n      <button\n        style={{\n          fontWeight: \"bold\",\n          opacity: open ? \"0.3\" : undefined,\n          padding: \"0.8rem 1.2rem\",\n          borderRadius: \"0.5rem\",\n          border: \"2px solid lightgray\",\n          color: \"black\",\n          cursor: \"pointer\"\n        }}\n        onClick={handleOpen}\n      >\n        Kitten, Please\n      </button>\n    </div>\n  );\n};\n\nconst colCount = 100000;\nconst rowCount = 200000;\n\nexport default function App() {\n  const [init, setInit] = useState(true);\n  const gridRef = useRef();\n\n  useEffect(() => {\n    if (!init) return;\n    setTimeout(() => {\n      setInit(false);\n      gridRef.current.scrollToItem({\n        columnIndex: colCount / 2,\n        rowIndex: rowCount / 2\n      });\n    });\n  });\n\n  return (\n    <div\n      className=\"App\"\n      style={{\n        width: \"100%\",\n        height: \"100%\"\n      }}\n    >\n      <Grid\n        style={{\n          width: \"100%\",\n          height: \"100%\"\n        }}\n        ref={gridRef}\n        columnCount={colCount}\n        columnWidth={150}\n        direction=\"ltr\"\n        height={2000}\n        rowCount={rowCount}\n        rowHeight={70}\n        width={2000}\n      >\n        {Cell}\n      </Grid>\n    </div>\n  );\n}\n","import { useEffect } from \"react\";\n\nexport default function useOutsideClickHandler(handler, ref) {\n  useEffect(() => {\n    function handleClickOutside(event) {\n      if (ref.current && !ref.current.contains(event.target)) {\n        handler();\n      }\n    }\n\n    // Bind the event listener\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    document.addEventListener(\"touchdown\", handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n      document.removeEventListener(\"touchdown\", handleClickOutside);\n    };\n  }, [ref, handler]);\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}